import ipywidgets as widgets
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from tqdm.notebook import tqdm
import io

from tools.helpers import *
from tools.Hamiltonian import *

def TheoryDashboard():
    '''
    Dashboard requesting for a range of accelerator parameters.
    Outputs two tabs: Theoretical steinbach schematic and Hamiltonian from Twiss Data Frame
    '''

    style = {'description_width': 'initial'}
    
    '====================== INPUTS ============================'
    #Baseline parameters
    h1 = widgets.HTML("<h2>Baseline Parameters</h2>")
    S = widgets.FloatText(value=36.7168, description='S [m-1]', step=0.25)  # Virtual Sextupole Strength
    QX = widgets.FloatText(value=1.67, description='QX', step=0.001)        # Beam horizontal tune
    QX_r = widgets.FloatText(value=5/3, description='QX res', step=0.001)   # Resonance horizontal tune
    Np = widgets.IntText(value=100, description='Np', step=100)             # Number of particles
    ex = widgets.FloatText(value=1E-6, description='ex rms', step=1E-6)     # RMS Normalised emittance
    DQX = widgets.FloatText(value=-4, description='DQX', step=0.1)          # Chromaticity
    DPP = widgets.FloatText(value=1E-4, description='dpp', step=1E-4)       # Particle momentum spread

    params_base = [h1, S, QX, QX_r, DQX, Np, ex, DPP]                       #Listing all baseline parameters
    col_param = widgets.VBox(params_base)                                           #Putting widgets into dashboard

    #Spiral step parameters
    h2 = widgets.HTML("<h2>Spiral Step Parameters</h2>", layout=widgets.Layout(height='auto'))
    ES = widgets.FloatText(value=0.055, description='ES', step = 0.01)      # Electrostatic Septum position
    phi = widgets.FloatText(value=45, description='phi')                    # Orientation of separatrices
    spir = widgets.FloatText(description='Spiral Step', disabled=True)      # Maximum Spiral Step
    kick =  widgets.FloatText(description='Spiral Kick', disabled=True)     # Maximum Spiral Kick
    
    Spiral_Step = [S, ES, phi]                                              #Listing widgets which affect the spiral step
    col_spiral = widgets.VBox([h2, ES, phi, spir, kick])                    #Putting spiral step widgets into dashboard
    

    #Hardt Condition parameters
    h3 = widgets.HTML("<h2>Hardt Condition Parameters</h2>", layout=widgets.Layout(height='auto'))
    hardt_chroma = widgets.Checkbox(description='Calculate Hardt Condition Chromaticity', value=False, indent=True, style=style)
    DX = widgets.FloatText(value=3.54, description='Dx', step=0.1)          # Dispersion at ES
    DXp = widgets.FloatText(value=-0.6, description='Dxp', step=0.1)        # Dispersion ' at ES
    alf = widgets.FloatText(value=90, description='alpha (deg)', step=1)    # Orientation
    mues = widgets.FloatText(value=36.7, description='ES muX', step=1)      # Phase-Advance at ES
    muxr = widgets.FloatText(value=186.1, description='XR muX', step=1)     # Phase-Advance at virtual resonant sextupole
    
    Hardt = [hardt_chroma, S, QX, DX, DXp, alf, mues, muxr]                 #Listing all widgets which affect the Hardt condition
    col_hardt = widgets.VBox([h3, DX, DXp, alf, mues, muxr, hardt_chroma])          #Putting Hardt Condition widgets into the dashboard
    
    #Hamiltonian Parameters
    h4 = widgets.HTML("<h2>Hamiltonian Parameters</h2>", layout=widgets.Layout(height='auto'))
    tdf = widgets.FileUpload(accept='.tfs', description='Twiss DataFrame', multiple=False, style=style, layout=widgets.Layout(width='auto'))
    ele_pos = widgets.Text(value='ES', description='Element',  disabled=False, layout=widgets.Layout(width='auto'))
    h_tdf = widgets.HTML("  Produce .tfs file from 'Tracking Code' tab")
    Hamilton_err = widgets.Output()
 
    col_ham = widgets.VBox([h4, ele_pos, tdf, h_tdf, Hamilton_err], layout=widgets.Layout(width='250px', align='center'))
    
    '====================== OUTPUTS ============================'
    #Plotting Steinbach
    Stbach_out = widgets.Output()
    with Stbach_out:
        figS, axS = plt.subplots(figsize=(10,5))
    
    # Takes Steinbach calculation function from SX_Tools.py
    particle_Q, particle_E, SLine, ALine = Steinbach(S.value,QX.value,QX_r.value,DPP.value,DQX.value,ex.value,Np.value)
    particles, = axS.plot(particle_Q, particle_E, 'o')
    sline, = axS.plot(SLine, ALine)
    axS.set_ylabel('$A_n$ [$\sqrt{m}$]')
    axS.set_xlabel(r'$Q_x$')
    axS.set_title("Tune and amplitude of beam distribution compared to resonance")
    axS.set_xlim(QX_r.value-0.003, QX_r.value+0.01)
    axS.set_ylim(0, 0.005)

    #Plotting Hamiltonian from ResTheory.py
    Hamilton_out = widgets.Output()
    with Hamilton_out:
        figH, axH = plt.subplots(figsize=(9,8))
    
    '====================== CONDITIONS & OBSERVABLES ============================'
    def rad(x):
        'Defining radians'
        theta = x * np.pi / 180
        return theta

    def HardtCondition(*args):
        'Calculates Hardt Condition'
        if hardt_chroma.value == True:
            dmu = 360 - ((mues.value - muxr.value) / QX.value * 360)
            dqx_hardt = (-S.value / (4 * np.pi)) * (DX.value * np.cos(rad(alf.value) - rad(dmu)) + DXp.value * np.sin(rad(alf.value) - rad(dmu)))
            DQX.value = dqx_hardt
            DQX.disabled = True
        if hardt_chroma.value == False:
            DQX.disabled = False

    # callback functions
    def updateSteinbach(change):
        """Observes changes to parameters, redraws Steinbach line & updates plot"""
        particle_Q, particle_E, SLine, ALine = Steinbach(S.value, QX.value, QX_r.value, DPP.value, DQX.value, ex.value, Np.value) 
        particles.set_xdata(particle_Q), particles.set_ydata(particle_E)
        sline.set_xdata(SLine), sline.set_ydata(ALine)
        axS.set_xlim(xmin.value, xmax.value)
        axS.set_ylim(ymin.value, ymax.value)
        axS.set_title(f"{steinbach_title.value}")
        figS.canvas.draw()
        
    def updateSpiralStep(change):
        """Observes changes to parameters, calculates spiral step values"""
        dR = 3/4 * S.value / np.cos(rad(phi.value)) * ES.value**2
        dRp = 3/4 * S.value * np.tan(rad(phi.value)) / np.cos(rad(phi.value)) * ES.value**2
        spir.value = round(dR, 3)
        kick.value = round(dRp, 4)

    def HamiltonPlot(change):
        """Observes changes to parameters, redraws Hamiltonian & updates plot"""
        import matplotlib.cm as cm
        if tdf.data != []:
            tdf_bytes = io.BytesIO( tdf.data[0] )                # Converts uploaded file into binary
            TDF = io.TextIOWrapper(tdf_bytes, encoding='utf-8')  # Unwraps binary values
            header, twiss_df = readtfs(TDF)                      # Extracts header information and dataframe.

            axH.clear() 
            xx, xpxp, hh = HamiltonianContour(twiss_df, QX.value, QX_r.value, ele_pos.value, Hamilton_err) #Calculates values to contour plot
            axH.contour(xx, xpxp, hh, 500, colors=[cm.get_cmap("coolwarm")(0)], linestyles='solid') #Edit this to change plot
            axH.axvline(ES.value, color='black')
            axH.set_xlabel('x [m]')
            axH.set_ylabel('px')
            axH.set_xlim(-ES.value-0.01, ES.value+0.01)
            axH.set_ylim(-0.004, 0.004)
            axH.set_title(f'Hamiltonian - nu={QX.value} ')

            figH.canvas.draw()
        
    '====================== CREATES DASHBOARD FROM INPUTS & OUTPUTS ============================'
    
    [params.observe(updateSteinbach, 'value') for params in params_base]     #Observing changes in Steinbach baseline parameters
    [spiral.observe(updateSpiralStep, 'value') for spiral in Spiral_Step]    #Observing changes in spiral step baseline parameters
    [hardt.observe(HardtCondition, 'value') for hardt in Hardt]              #Observing changes in Hardt baseline parameters
    
    # If either of these change, update Hamiltonian Plot
    tdf.observe(HamiltonPlot, 'data')
    QX.observe(HamiltonPlot, 'value')
    ES.observe(HamiltonPlot, 'value')
    ele_pos.observe(HamiltonPlot, 'value')
    
    # matplotlib plotting settings
    steinbach_title = widgets.Text(value='Tune and amplitude of beam distribution compared to resonance', description='Title', layout=widgets.Layout(width='auto'))
    xmin, xmax = widgets.FloatText(value=1.66, description='Xmin', step=0.01, layout=widgets.Layout(width='200px')), widgets.FloatText(value=1.68, description='Xmax', step=0.01, layout=widgets.Layout(width='200px'))
    ymin, ymax = widgets.FloatText(value=0, description='Ymin', step=0.01, layout=widgets.Layout(width='200px')), widgets.FloatText(value=0.005, description='Ymax', step=0.01, layout=widgets.Layout(width='200px'))
    axes = [steinbach_title, xmin, xmax, ymin, ymax]
    Axes = widgets.VBox([steinbach_title, widgets.HBox([xmin, xmax]), widgets.HBox([ymin, ymax])])
    [axis.observe(updateSteinbach, 'value') for axis in axes]
    
    SteinbachOut = widgets.HBox([Stbach_out, Axes])    
        
    outtab = widgets.Tab()                           #Makes a tab of Steinbach & Hamiltonian Outputs
    outtab.children = SteinbachOut, Hamilton_out
    outtab.set_title(0, "Steinbach"), outtab.set_title(1, "Hamiltonian")

    '====================== DISPLAY DASHBOARD ============================'
    Dashboard = widgets.VBox([widgets.HBox([col_param, col_spiral, col_hardt, col_ham]), outtab]) 
    return(Dashboard)
